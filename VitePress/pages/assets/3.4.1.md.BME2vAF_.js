import{_ as t,c as e,o,a4 as r}from"./chunks/framework.4aTu-Nia.js";const m=JSON.parse('{"title":"3.4.1 - 算术操作","description":"","frontmatter":{"title":"3.4.1 - 算术操作","footer":true,"lastUpdated":true,"outline":false},"headers":[],"relativePath":"3.4.1.md","filePath":"3.4.1.md"}'),s={name:"3.4.1.md"},a=r('<h3 id="_3-4-1-算术操作" tabindex="-1">3.4.1 - 算术操作 <a class="header-anchor" href="#_3-4-1-算术操作" aria-label="Permalink to &quot;3.4.1 - 算术操作&quot;">​</a></h3><p>Lua支持以下算术操作：</p><ul><li><strong>+</strong>：加法</li><li><strong>-</strong>：减法</li><li><strong>*</strong>：乘法</li><li><strong>/</strong>：浮点除法</li><li><strong>//</strong>：整除</li><li><strong>%</strong>：模</li><li><strong>^</strong>：幂</li><li><strong>-</strong>：一元运算，取负</li></ul><p>除了幂和浮点除法之外，算术操作的工作流程如下：如果操作数都是整数，那么以整数操作且结果为整数。否则，如果操作数都是数字，那么以机器浮点算术规则（通常是IEEE 754标准）的流程操作，且结果是浮点数。（在算术运算中string库将字符串强制转换到数字；参见<a href="/3.4.3.html">3.4.3</a>。）</p><p>幂和浮点除法（/）通常会将它们的操作数转换到浮点数且结果也是浮点数。幂运算使用ISO标准C函数pow，所以它也适用于非整数幂。</p><p>整除（//）是指对操作数做除法后取整。</p><p>模的定义是指对操作数整除后取余。</p><p>对于整数算术操作出现溢出的情况，所有的操作都会<em>回绕</em>。</p>',8),n=[a];function i(l,_,p,c,d,g){return o(),e("div",null,n)}const u=t(s,[["render",i]]);export{m as __pageData,u as default};
