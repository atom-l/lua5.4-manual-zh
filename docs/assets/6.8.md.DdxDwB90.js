import{_ as e,c as o,o as i,a4 as t}from"./chunks/framework.Cy9JvDAg.js";const c=JSON.parse('{"title":"6.8 - I/O操作","description":"","frontmatter":{"title":"6.8 - I/O操作","footer":true,"lastUpdated":true,"outline":"deep"},"headers":[],"relativePath":"6.8.md","filePath":"6.8.md"}'),a={name:"6.8.md"},l=t('<h2 id="_6-8-i-o操作" tabindex="-1">6.8 - I/O操作 <a class="header-anchor" href="#_6-8-i-o操作" aria-label="Permalink to &quot;6.8 - I/O操作&quot;">​</a></h2><p>I/O库提供了两种不同风格的文件操作。第一种使用隐式的文件句柄；即有些操作可以设置默认的输入文件和输出文件，并且所有的I/O操作都会使用这些默认文件来执行。第二种就是使用显式的文件句柄了。</p><p>当使用隐式的文件句柄时，其所有的操作都由表 io 提供。使用显式的文件句柄时，<a href="/lua5.4-manual-zh/6.8.html#io.open">io.open</a>操作会返回一个文件句柄，该文件句柄中的方法提供了相关操作。</p><p>当文件句柄关闭时，会尝试调用其元表中的 __gc 和 __close 元方法。</p><p>io 表中还提供了三个预定义的文件句柄：io.stdin、io.stdout、和 io.stderr，其和C代码中的用法含义相同。I/O库永远不会关闭这几个文件。</p><p>除非另有说明，所有的I/O函数都会在失败的时候返回<strong>fail</strong>，再加上一个错误信息作为第二个返回值以及系统相关的错误码作为第三个返回值。在非POSIX系统中，在发生错误的时对错误消息和错误码的计算可能不是线程安全的，因为其由C代码中的全局变量 errno 而来。</p><h3 id="io.close" tabindex="-1">io.close ([file]) <a class="header-anchor" href="#io.close" aria-label="Permalink to &quot;io.close (\\[file\\]) {#io.close}&quot;">​</a></h3><p>等效于 file:close() 。如果参数 file 缺省，则会关闭默认的输出文件。</p><h3 id="io.flush" tabindex="-1">io.flush () <a class="header-anchor" href="#io.flush" aria-label="Permalink to &quot;io.flush () {#io.flush}&quot;">​</a></h3><p>等效于 io.output():flush() 。</p><h3 id="io.input" tabindex="-1">io.input ([file]) <a class="header-anchor" href="#io.input" aria-label="Permalink to &quot;io.input (\\[file\\]) {#io.input}&quot;">​</a></h3><p>当传入文件名来调用，会（以文本模式）打开对应的文件，并将该文件句柄作为默认输入文件。当传入文件句柄来调用时，会直接将其设为默认输入文件。不带参数调用则会返回当前的默认输入文件。</p><p>发生错误的情况下会抛出错误，而不是返回错误码。</p><h3 id="io.lines" tabindex="-1">io.lines ([filename, ···]) <a class="header-anchor" href="#io.lines" aria-label="Permalink to &quot;io.lines ([filename, ···]) {#io.lines}&quot;">​</a></h3><p>以读模式打开相应的文件，并返回一个迭代器函数，用以像 file:lines(···) 一样遍历文件内容。当这个迭代器函数读取失败，其会自动关闭该文件。除了返回迭代器函数，io.lines 还会额外返回三个值：两个作为占位符的<strong>nil</strong>值，加上所创建的文件句柄。因此，当将其放在<strong>for</strong>循环中时，循环被错误或<strong>break</strong>语句打断后，该文件也会关闭。</p><p>缺省文件名调用 io.lines() 等效于 io.input():lines(&quot;l&quot;) ；即迭代默认输入文件的行。在这种情况下，迭代器不会在循环结束时关闭文件。</p><p>打开文件错误的情况下，该函数会抛出错误，而不是返回错误码。</p><h3 id="io.open" tabindex="-1">io.open (filename [, mode]) <a class="header-anchor" href="#io.open" aria-label="Permalink to &quot;io.open (filename [, mode]) {#io.open}&quot;">​</a></h3><p>该函数会以字符串参数 mode 所指定的模式打开参数 filename 所对应的文件。成功的情况下，其会返回一个新的文件句柄。</p><p>参数 mode 可以是以下内容：</p><ul><li><strong>r：</strong> 读模式（默认模式）。</li><li><strong>w：</strong> 写模式。</li><li><strong>a：</strong> 追加模式。</li><li><strong>r+：</strong> 更新模式，保留之前的数据。</li><li><strong>w+：</strong> 更新模式，删除之前的数据。</li><li><strong>a+：</strong> 追加更新模式，保留之前的数据，只允许在文件末尾写入。</li></ul><p>字符串参数 mode 可以用一个 &#39;b&#39; 做结尾，在某些系统系统中以二进制模式打开文件是必须的。</p><h3 id="io.output" tabindex="-1">io.output ([file]) <a class="header-anchor" href="#io.output" aria-label="Permalink to &quot;io.output (\\[file\\]) {#io.output}&quot;">​</a></h3><p>类似于<a href="/lua5.4-manual-zh/6.8.html#io.input">io.input</a>，但操作的是默认输出文件。</p><h3 id="io.popen" tabindex="-1">io.popen (prog [, mode]) <a class="header-anchor" href="#io.popen" aria-label="Permalink to &quot;io.popen (prog [, mode]) {#io.popen}&quot;">​</a></h3><p>该函数依赖于系统，其不是在所有系统上都可用的。</p><p>在单独的进程中启动 prog 程序，并返回一个文件句柄，你可以使用该句柄来从这个程序中读取数据（如果参数 mode 为 &quot;r&quot; ，这也是默认值），或写入数据（如果参数 mode 为 &quot;w&quot;）。</p><h3 id="io.read" tabindex="-1">io.read (···) <a class="header-anchor" href="#io.read" aria-label="Permalink to &quot;io.read (···) {#io.read}&quot;">​</a></h3><p>等效于 io.input():read(···) 。</p><h3 id="io.tmpfile" tabindex="-1">io.tmpfile () <a class="header-anchor" href="#io.tmpfile" aria-label="Permalink to &quot;io.tmpfile () {#io.tmpfile}&quot;">​</a></h3><p>成功的情况下，会返回临时文件的句柄。该文件是以更新模式打开并且会在程序结束时自动删除掉。</p><h3 id="io.type" tabindex="-1">io.type (obj) <a class="header-anchor" href="#io.type" aria-label="Permalink to &quot;io.type (obj) {#io.type}&quot;">​</a></h3><p>检查对象 obj 是否为一个有效的文件句柄。如果 obj 是一个打开的文件句柄，则返回字符串 &quot;file&quot;。如果是一个关闭的文件句柄，则返回 &quot;closed file&quot; 。或者不是文件句柄则返回<strong>fail</strong>。</p><h3 id="io.write" tabindex="-1">io.write (···) <a class="header-anchor" href="#io.write" aria-label="Permalink to &quot;io.write (···) {#io.write}&quot;">​</a></h3><p>等效于 io.output():write(···) 。</p><h3 id="file:close" tabindex="-1">file:close () <a class="header-anchor" href="#file:close" aria-label="Permalink to &quot;file:close () {#file:close}&quot;">​</a></h3><p>关闭文件 file 。注意文件会在其句柄被GC后自动关闭，但其关闭的时刻是不确定的。</p><p>当关闭一个由<a href="/lua5.4-manual-zh/6.8.html#io.popen">io.popen</a>创建的文件句柄时，<a href="/lua5.4-manual-zh/6.8.html#file:close">file:close</a>会使用<a href="/lua5.4-manual-zh/6.8.html#os.execute">os.execute</a>的返回值。</p><h3 id="file:flush" tabindex="-1">file:flush () <a class="header-anchor" href="#file:flush" aria-label="Permalink to &quot;file:flush () {#file:flush}&quot;">​</a></h3><p>将数据保存到文件 file 中。</p><h3 id="file:lines" tabindex="-1">file:lines (···) <a class="header-anchor" href="#file:lines" aria-label="Permalink to &quot;file:lines (···) {#file:lines}&quot;">​</a></h3><p>返回一个迭代器函数，其每次调用都会按照给出的格式来读文件。如果没有给出格式，则默认使用 &quot;l&quot; 。例如：</p><pre>for c in file:lines(1) do <em>body</em> end</pre><p>这样的代码将会从当前位置遍历文件的所有字符。与<a href="/lua5.4-manual-zh/6.8.html#io.lines">io.lines</a>不同，该函数不会在循环结束后关闭文件。</p><h3 id="file:read" tabindex="-1">file:read (···) <a class="header-anchor" href="#file:read" aria-label="Permalink to &quot;file:read (···) {#file:read}&quot;">​</a></h3><p>按照给出的格式读取文件 file 的指定内容。对于每种格式，该函数会返回所读取的字符串或数字，或者不能按照指定格式读取数据时返回<strong>fail</strong>。（在后边的情况中，该函数不会读取后续的格式。）当不传入参数调用时，会使用默认的格式来读取下一行（如下所示）。</p><p>可用的格式有：</p><ul><li><strong>&quot;n&quot;：</strong> 读取一个数字并作为整数或浮点数返回，其遵循Lua的词法规则。（数字前边可能有空格和符号。）该模式总是读取尽可能长的数字序列；如果没有有效的数字前缀（如，空字符串、&quot;0x&quot;、或者&quot;3.4e-&quot;）或者实在太长（超过200个字符），则会放弃读取并返回<strong>fail</strong>。</li><li><strong>&quot;a&quot;：</strong> 从当前位置读取整个文件。如果当前位置在文件末尾，则会返回一个空字符串，该格式永远不会失败。</li><li><strong>&quot;l&quot;：</strong> 读取下一行并忽略换行符，到达文件末尾时会返回<strong>fail</strong>。这是默认的读取格式。</li><li><strong>&quot;L&quot;：</strong> 读取下一行并保留换行符（如果有的话），到达文件末尾时会返回<strong>fail</strong>。</li><li><strong><em>number</em>：</strong> 读取若干字节的字符串，到达文件末尾时会返回<strong>fail</strong>。如果 number 为零，则什么都不会读取并返回空字符串，或者刚好在文件末尾时返回<strong>fail</strong>。</li></ul><p>&quot;l&quot; 和 &quot;L&quot; 格式只能对文本文件使用。</p><h3 id="file:seek" tabindex="-1">file:seek ([whence [, offset]]) <a class="header-anchor" href="#file:seek" aria-label="Permalink to &quot;file:seek ([whence [, offset]]) {#file:seek}&quot;">​</a></h3><p>设置并获取文件位置，所返回的位置表示为相对于文件开头偏移，而给出的位置由基于字符串参数 whence 所指的的位置的偏移 offset ，whence 字符串内容可选：</p><ul><li><strong>&quot;set&quot;：</strong> 基于零点位置（文件开头）。</li><li><strong>&quot;cur&quot;：</strong> 基于当前位置。</li><li><strong>&quot;end&quot;：</strong> 基于文件末尾。</li></ul><p>成功的情况下，seek 会返回最终的文件位置，其表示为为相对于文件开头的字节偏移量。如果 seek 失败了，则返回<strong>fail</strong>，以及描述错误的字符串。</p><p>参数 whence 默认为 &quot;cur&quot;，offset 默认为0。因此，执行 file:seek() 会返回当前的文件位置而不会改变它；执行 file:seek(&quot;set&quot;) 会将当前位置设置到文件开头（并返回0）；执行 file:seek(&quot;end&quot;) 会将当前位置设置到文件末尾并返回文件的大小。</p><h3 id="file:setvbuf" tabindex="-1">file:setvbuf (mode [, size]) <a class="header-anchor" href="#file:setvbuf" aria-label="Permalink to &quot;file:setvbuf (mode [, size]) {#file:setvbuf}&quot;">​</a></h3><p>设置文件的缓冲模式。有三种可用模式：</p><ul><li><strong>&quot;no&quot;：</strong> 无缓冲。</li><li><strong>&quot;full&quot;：</strong> 全缓冲。</li><li><strong>&quot;line&quot;：</strong> 行缓冲。</li></ul><p>对于后两种情况，size 用于指定缓冲区字节大小。其默认是个适当的大小（目前源码中是一个预定义的值，其为 16 X 所处平台的指针大小 X <a href="/lua5.4-manual-zh/4.6.html#lua_Number">lua_Number</a>大小，一般为1024，即1KB）。</p><p>每种模式所指的具体行为是不可移植的，更多细节请查看所处平台的ISO标准C中的 setvbuf 函数。</p><h3 id="file:write" tabindex="-1">file:write (···) <a class="header-anchor" href="#file:write" aria-label="Permalink to &quot;file:write (···) {#file:write}&quot;">​</a></h3><p>将接收到的每个参数都写入到文件 file 中。所传参数必须是字符串或数字。</p><p>成功的情况下，该函数返回 file 本身。</p>',62),r=[l];function n(s,u,p,f,h,d){return i(),o("div",null,r)}const m=e(a,[["render",n]]);export{c as __pageData,m as default};
