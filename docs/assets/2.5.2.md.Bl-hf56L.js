import{_ as e,c as a,o as t,a4 as o}from"./chunks/framework.4aTu-Nia.js";const h=JSON.parse('{"title":"2.5.2 - 代际GC（Generational Garbage Collection）","description":"","frontmatter":{"title":"2.5.2 - 代际GC（Generational Garbage Collection）","footer":true,"lastUpdated":true,"outline":false},"headers":[],"relativePath":"2.5.2.md","filePath":"2.5.2.md"}'),r={name:"2.5.2.md"},n=o('<h3 id="_2-5-2-代际gc-generational-garbage-collection" tabindex="-1">2.5.2 - 代际GC（Generational Garbage Collection） <a class="header-anchor" href="#_2-5-2-代际gc-generational-garbage-collection" aria-label="Permalink to &quot;2.5.2 - 代际GC（Generational Garbage Collection）&quot;">​</a></h3><p>在代际模式中，收集器频繁进行*次代（minor）<em>收集，其仅遍历最近创建的对象。如果在进行了次代收集后内存仍然超出了限制，那么收集器会做一次“世界暂停(stop-the-world)”的</em>主（major）*收集，其会遍历所有的对象。代际模式使用两个参数：<em>次代乘数（minor multiplier）<em>以及</em>主乘数（major multiplier）</em>。</p><p><em>次代乘数</em>用以控制次代回收的频率。对于一个<em>次代乘数</em>值x，会在内存相对于上次主收集后增长超过x%时开始一轮新的次代收集。例如乘数为20时，收集器将会在内存增长超过上次主收集时的20%时执行一轮次代收集。其默认值是20，最大为200。</p><p><em>主乘数</em>用以控制主会后的频率。对于一个<em>主乘数</em>值x，会在内存相对于上次主收集后增长超过x%时开始一轮新的主收集。例如乘数为100时，收集器将会在内存使用量超过上次的两倍时执行一轮主收集。其默认值是100，最大为1000。</p>',4),l=[n];function i(_,c,m,s,p,d){return t(),a("div",null,l)}const u=e(r,[["render",i]]);export{h as __pageData,u as default};
