import{_ as t,c as e,o,a4 as a}from"./chunks/framework.Cy9JvDAg.js";const h=JSON.parse('{"title":"8.1 - 语言中的兼容性问题","description":"","frontmatter":{"title":"8.1 - 语言中的兼容性问题","footer":true,"lastUpdated":true,"outline":false},"headers":[],"relativePath":"8.1.md","filePath":"8.1.md"}'),_={name:"8.1.md"},l=a('<h2 id="_8-1-语言中的兼容性问题" tabindex="-1">8.1 - 语言中的兼容性问题 <a class="header-anchor" href="#_8-1-语言中的兼容性问题" aria-label="Permalink to &quot;8.1 - 语言中的兼容性问题&quot;">​</a></h2><ul><li>算术运算和位运算中对字符串到数字的强制转换已经从语言核心特性中移除。对于算术运算（位运算没有）字符串库中可以使用字符串元函数来完成相似的任务。然而，与之前的版本不同，新版实现中保留了字符串中的隐式数字类型。例如，&quot;1&quot; + &quot;2&quot; 的结果是个整数，而不是浮点数。</li><li>溢出的字面十进制整数常量会被作为浮点数读取，而不是做环绕。如果你想要产生之前的行为（环绕），你可以使用十六进制来表示这种常量。</li><li>用 __lt 元方法来逼近 __le 的做法已经被溢出。需要用到该元函数时，该元函数必须显式地定义。</li><li>数字形式的<strong>for</strong>循环的语义有一些变化。特别是控制变量不会再做环绕了。</li><li>不可以在相同的可见范围内声明重名的<strong>goto</strong>标签，即时另一个标签是在封闭的语句块中声明的。</li><li>终结某个对象的时候，Lua不会忽略 __gc 元函数并非时个函数的情况。任何值都将被调用，只要它存在。（和其他调用终结器时发生的错误一样，不可调用的值将会产生一个警告。）</li></ul>',2),r=[l];function i(s,n,c,d,u,f){return o(),e("div",null,r)}const m=t(_,[["render",i]]);export{h as __pageData,m as default};
