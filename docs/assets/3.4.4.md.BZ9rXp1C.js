import{_ as t,c as a,o as e,a4 as o}from"./chunks/framework.Cy9JvDAg.js";const h=JSON.parse('{"title":"3.4.4 - 关系操作","description":"","frontmatter":{"title":"3.4.4 - 关系操作","footer":true,"lastUpdated":true,"outline":false},"headers":[],"relativePath":"3.4.4.md","filePath":"3.4.4.md"}'),r={name:"3.4.4.md"},s=o('<h3 id="_3-4-4-关系操作" tabindex="-1">3.4.4 - 关系操作 <a class="header-anchor" href="#_3-4-4-关系操作" aria-label="Permalink to &quot;3.4.4 - 关系操作&quot;">​</a></h3><p>Lua支持以下关系操作：</p><ul><li><strong>==</strong>：相等</li><li><strong>~=</strong>：不等</li><li><strong>&lt;</strong>：小于</li><li><strong>&gt;</strong>: 大于</li><li><strong>&lt;=</strong>：小于等于</li><li><strong>&gt;=</strong>：大于等于</li></ul><p>这些关系操作的结果始终都是<strong>false</strong>或<strong>true</strong>。</p><p>相等（==）首先会比较操作数的类型。如果类型不同，那么结果就是<strong>false</strong>。否则将比较操作数的值。字符串在其拥有相同的字节内容时相等。数字在其拥有相同的算术值时相等。</p><p>表、 userdata 和协程都是比较其引用：两个对象只在同时引用同一个对象的情况下相等。每当你创建一个新对象（表、 userdata 或协程），这个新对象和之前存在的所有对象都是不同的。方法总是和它自身相等。有任何可检测的差异（不同的行为或不同的定义）的方法总是不同的。不同时间创建但没有可检测差异的方法之间被归类于相等或不等都是有可能的（这取决于内部的缓存细节）。</p><p>你可以通过使用__eq元函数（参见<a href="/lua5.4-manual-zh/2.4.html">2.4</a>）来改变Lua表和 userdata 的比较方式。</p><p>比较是否相等时不会将字符串转换到数字，反之亦然。因此，&quot;0&quot;==0等于<strong>false</strong>，且t[0]和t[&quot;0&quot;]表示在表中表示不同的字段。</p><p>不等操作（~=）与相等操作（==）相反。</p><p>顺序操作以如下流程工作：如果参数都是数字，则通过它们的算术值比较，无论它们的子类型如何。另外，如果参数都是字符串，则通过当前所设置的方式来比较。否则，Lua会尝试调用__lt或__le元函数（参见<a href="/lua5.4-manual-zh/2.4.html">2.4</a>）。a &gt; b会被转化为b &lt; a，而a &gt;= b会被转换为b &lt;= a，从而进行比较。</p><p>在IEEE 754标准中，特殊值NaN被认为不小于、不等于、也不大于任何值，包括它自己。</p>',11),l=[s];function n(_,i,p,u,g,c){return e(),a("div",null,l)}const f=t(r,[["render",n]]);export{h as __pageData,f as default};
